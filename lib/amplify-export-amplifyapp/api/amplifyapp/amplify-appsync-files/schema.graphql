
type House {
  id: ID!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelHouseConnection {
  items: [House]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelHouseFilterInput {
  id: ModelIDInput
  description: ModelStringInput
  and: [ModelHouseFilterInput]
  or: [ModelHouseFilterInput]
  not: ModelHouseFilterInput
}

type Query {
  getHouse(id: ID!): House
  listHouses(filter: ModelHouseFilterInput, limit: Int, nextToken: String): ModelHouseConnection
  syncHouses(filter: ModelHouseFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelHouseConnection
}

input ModelHouseConditionInput {
  description: ModelStringInput
  and: [ModelHouseConditionInput]
  or: [ModelHouseConditionInput]
  not: ModelHouseConditionInput
}

input CreateHouseInput {
  id: ID
  description: String
  _version: Int
}

input UpdateHouseInput {
  id: ID!
  description: String
  _version: Int
}

input DeleteHouseInput {
  id: ID!
  _version: Int
}

type Mutation {
  createHouse(input: CreateHouseInput!, condition: ModelHouseConditionInput): House
  updateHouse(input: UpdateHouseInput!, condition: ModelHouseConditionInput): House
  deleteHouse(input: DeleteHouseInput!, condition: ModelHouseConditionInput): House
}

type Subscription {
  onCreateHouse: House @aws_subscribe(mutations: ["createHouse"])
  onUpdateHouse: House @aws_subscribe(mutations: ["updateHouse"])
  onDeleteHouse: House @aws_subscribe(mutations: ["deleteHouse"])
}

